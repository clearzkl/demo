试题积累
将函数 fn 的执行上下文改为 obj 对象 ：
①：function speak(fn, obj) {
return fn.bind(obj)();
}
②：function speak(fn, obj) {
return fn.apply(obj, obj);
}

实现函数 makeClosures，调用之后满足如下条件：
1、返回一个函数数组 result，长度与 arr 相同
2、运行 result 中第 i 个函数，即 result[i]()，结果与 fn(arr[i]) 相同

法①：function makeClosures(arr, fn) {
var result=[];
for(var i=0;i<arr.length;i++){
result[i]=(function(i){
return function(){
return fn(arr[i]);   
}
})(i)
}
return result;
}
法②：
function makeClosures(arr, fn) {
var funcs = [];
arr.forEach(function(item, index){
var func = function(){
return fn(item);
}
funcs.push(func);
});
return funcs;
}
输入例子:
var arr = [1, 2, 3]; var square = function (x) { return x * x; }; var funcs = makeClosures(arr, square); funcs[1]();


输出例子:
4
题目描述
已知 fn 为一个预定义函数，实现函数 curryIt，调用之后满足如下条件：
1、返回一个函数 a，a 的 length 属性值为 1（即显式声明 a 接收一个参数）
2、调用 a 之后，返回一个函数 b, b 的 length 属性值为 1
3、调用 b 之后，返回一个函数 c, c 的 length 属性值为 1
4、调用 c 之后，返回的结果与调用 fn 的返回值一致
5、fn 的参数依次为函数 a, b, c 的调用参数 
解释： 柯里化是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。简单理解题目意思，就是指，我们将预定义的函数的参数逐一传入到curryIt中，当参数全部传入之后，就执行预定义函数。于是，我们首先要获得预定义函数的参数个数fn.length，然后声明一个空数组去存放这些参数。返回一个匿名函数接收参数并执行，当参数个数小于fn.length，则再次返回该匿名函数，继续接收参数并执行，直至参数个数等于fn.length。最后，调用apply执行预定义函数
function curryIt(fn) {
//获取fn参数的数量
var n = fn.length;
//声明一个数组args
var args = [];
//返回一个匿名函数
return function(arg){
//将curryIt后面括号中的参数放入数组
args.push(arg);
//如果args中的参数个数小于fn函数的参数个数，
//则执行arguments.callee（其作用是引用当前正在执行的函数，这里是返回的当前匿名函数）。
//否则，返回fn的调用结果
if(args.length < n){
return arguments.callee;
}else return fn.apply("",args);
}
}

获取数字 num 二进制形式第 bit 位的值。注意：
1、bit 从 1 开始
2、返回 0 或 1
3、举例：2 的二进制为 10，第 1 位为 0，第 2 位为 1 

通过num.toString(2)能直接将num转换为2进制数格式的字符串，利用下标就能将对应值取出来。题目返回的数字是从右往左，因此下标为倒数。
1
2
3
4
function valueAtBit(num, bit) {
var s = num.toString(2);
return s[s.length - bit];
}
法②
function valueAtBit(num, bit) {
return (num >> (bit -1)) & 1;
}
题目描述
将给定数字转换成二进制字符串。如果字符串长度不足 8 位，则在前面补 0 到满8位。 
法①：
function convertToBinary(num) {
//转换为2进制格式
var s = num.toString(2);
//获得2进制数长度
var l = s.length;
if(l<8){
//声明一个字符串用于补满0
var s1 = "0000000";
var s2 = s1.slice(0,8-l);
s = s2+s; 
}
return s;
}
法②：
function convertToBinary(num) {
var res = num.toString(2);
return res.length > 8 ? res : ('00000000' + res).slice(-8);
}
给定字符串 str，检查其是否包含连续重复的字母（a-zA-Z），包含返回 true，否则返回 false 
function containsRepeatingLetter(str) {
return /([a-zA-Z])\1/.test(str);
}
[问答题|10分]
题目描述
[附加题] 请实现下面的自定义事件 Event 对象的接口，功能见注释(测试1)该 Event 对象的接口需要能被其他对象拓展复用(测试2)// 测试1
Event.on('test', function (result) {
console.log(result);
});
Event.on('test', function () {
console.log('test');
});
Event.emit('test', 'hello world'); // 输出 'hello world' 和 'test'
// 测试2
var person1 = {};
var person2 = {};
Object.assign(person1, Event);
Object.assign(person2, Event);
person1.on('call1', function () {
console.log('person1');
});
person2.on('call2', function () {
console.log('person2');
});
person1.emit('call1'); // 输出 'person1'
person1.emit('call2'); // 没有输出
person2.emit('call1'); // 没有输出
person2.emit('call2'); // 输出 'person2' var Event = {
// 通过on接口监听事件eventName
// 如果事件eventName被触发，则执行callback回调函数
on: function (eventName, callback) {
//你的代码
},
// 触发事件 eventName
emit: function (eventName) {
//你的代码
}
};
答案：
var Event = {
// 通过on接口监听事件eventName
// 如果事件eventName被触发，则执行callback回调函数
on: function (eventName, callback) {
//你的代码
if(!this.handles){
//this.handles={};
Object.defineProperty(this, "handles", {
value: {},
enumerable: false,
configurable: true,
writable: true
})
}

if(!this.handles[eventName]){
this.handles[eventName]=[];
}
this.handles[eventName].push(callback);
},
// 触发事件 eventName
emit: function (eventName) {
//你的代码
if(this.handles[arguments[0]]){
for(var i=0;i<this.handles[arguments[0]].length;i++){
this.handles[arguments[0]][i](arguments[1]);
}
}
}
};
答案2：
var Event = {
on: function (eventName, callback) {
if (!this[eventName]) {
this[eventName] = [];
}
this[eventName].push(callback);
},
emit: function (eventName) {
var params = arguments.length > 1 ? Array.prototype.slice.call(arguments, 1) : [];
if (this[eventName]) {
Array.prototype.forEach.call(this[eventName], function (item) {
item.apply(null, params);
//关键地方,appaly改变当前的执行环境
});
}
}
}


Http中200、302、304、404和500等响应状态码所表示的意义？
200:访问成功（表示一切正常，返回的是正常请求结果）
302：临时重定向（指出被请求的文档已被临时移动到别处，此文档的新的URL在Location响应头中给出）
304：未修改（表示客户机缓存的版本是最新的，客户机应该继续使用它。）
404：访问的文件不存在（服务器上不存在客户机所请求的资源）
500：内部服务器错误（服务器端的CGI、ASP、JSP等程序发生错误）
题目描述
获取 url 中的参数
1. 指定参数名称，返回该参数的值 或者 空字符串
2. 不指定参数名称，返回全部的参数对象 或者 {}
3. 如果存在多个同名参数，则返回数组 
function getUrlParam(sUrl,sKey){
var result = {};
sUrl.replace(/\??(\w+)=(\w+)&?/g,function(a,k,v){
if(result[k] !== void 0){
var t = result[k];
result[k] = [].concat(t,v);
}else{
result[k] = v;
}
});
if(sKey === void 0){
return result;
}else{
return result[sKey] || '';
}
}

根据包名，在指定空间中创建对象 
输入描述:
namespace({a: {test: 1, b: 2}}, 'a.b.c.d')


输出描述:
{a: {test: 1, b: {c: {d: {}}}}}
function namespace(oNamespace, sPackage) {
if(sPackage.length>0){
var val=sPackage.substring(0,1);
if(!oNamespace[val]){
oNamespace[val]={};
}
arguments.callee(oNamespace[val],sPackage.substring(sPackage.indexOf(val)+2,sPackage.length));
return oNamespace;
}else{
return;
}
}
JavaScript异步编程的四种方法
1.回调函数
f1(f2);
回调函数是异步编程的基本方法。其优点是易编写、易理解和易部署；缺点是不利于代码的阅读和维护，各个部分之间高度耦合 （Coupling），流程比较混乱，而且每个任务只能指定一个回调函数。
2.事件监听
f1.on('done',f2);
事件监听即采用事件驱动模式，任务的执行不取决于代码的顺序，而取决于某个事件是否发生。其优点是易理解，可以绑定多个事件，每个事件可以指定多个回调函数，可以去耦合， 有利于实现模块化；缺点是整个程序都要变成事件驱动型，运行流程会变得不清晰。
3.  发布/订阅
f1: jQuery.publish("done");
f2: jQuery.subscribe("done", f2);
假定存在一个"信号中心"，某个任务执行完成，就向信号中心"发布"（publish）一个信号，其他任务可以向信号中心"订阅"（subscribe）这个信号，从而知道什么时候自己可以开始执行，这就叫做 "发布/订阅模式" （publish-subscribe pattern），又称 "观察者模式" （observer pattern）。该 方法的性质与"事件监听"类似，但其优势在于可以 通过查看"消息中心"，了解存在多少信号、每个信号有多少订阅者，从而监控程序的运行。
4.promise对象
f1().then(f2);
Promises对象是CommonJS工作组提出的一种规范，目的是为异步编程提供 统一接口 ；思想是， 每一个异步任务返回一个Promise对象，该对象有一个then方法，允许指定回调函数。其优点是回调函数是链式写法，程序的流程非常清晰，而且有一整套的配套方法， 可以实现许多强大的功能，如指定多个回调函数、指定发生错误时的回调函数， 如果一个任务已经完成，再添加回调函数，该回调函数会立即执行，所以不用担心是否错过了某个事件或信号；缺点就是编写和理解相对比较难。


写一个求和的函数sum，达到下面的效果
1
2
3
4
5
6
7
8
9
// Should equal 15
sum(1, 2, 3, 4, 5);
// Should equal 0
sum(5, null, -5);
// Should equal 10
sum('1.0', false, 1, true, 1, 'A', 1, 'B', 1, 'C', 1, 'D', 1,
'E', 1, 'F', 1, 'G', 1);
// Should equal 0.3, not 0.30000000000000004
sum(0.1, 0.2);
function sum() {
var nResult = 0;
for (var i = 0, l = arguments.length; i < l; i++) {
nResult += window.parseFloat(arguments[i]) || 0;
}
return nResult.toFixed(3) * 1000 / 1000;
}

写一个traverse函数，输出所有页面宽度和高度大于50像素的节点。

function traverse(oNode) {
var aResult = [];
oNode = oNode || document.body;
if (oNode.style) {
var nWidth = window.parseInt(oNode.style.width, 10) || 0;
var nHeight = window.parseInt(oNode.style.height, 10) || 0;
if (nWidth > 50 && nHeight > 50) {
aResult.push(oNode);
}
}
var aChildNodes = oNode.childNodes;
if (aChildNodes.length > 0) {
for (var i = 0, l = aChildNodes.length; i < l; i++) {
var oTmp = aChildNodes[i];
aResult = aResult.concat(traverse(oTmp));
}
}
return aResult;
}

法二：
function traverse(){
return Array.prototype.filter.call(document.querySelectorAll('body *'), function(node){
return node.offsetWidth > 50 && node.offsetHeight > 50;
});
}

CSS引入的方式有哪些? link和@import的区别是?
内联 内嵌 外链 导入
区别 ：同时加载
前者无兼容性，后者CSS2.1以下浏览器不支持
Link 支持使用javascript改变样式，后者不可

写出几种IE6 BUG的解决方法
1.双边距BUG float引起的 使用display
2.3像素问题 使用float引起的 使用dislpay:inline -3px
3.超链接hover 点击后失效 使用正确的书写顺序 link visited hover active
4.Ie z-index问题 给父级添加position:relative
5.Png 透明 使用js代码 改
6.Min-height 最小高度 ！Important 解决’
7.select 在ie6下遮盖 使用iframe嵌套
8.为什么没有办法定义1px左右的宽度容器（IE6默认的行高造成的，使用over:hidden,zoom:0.08 line-height:1px）

split() join() 的区别
前者是切割成数组的形式，后者是将数组转换成字符串

页面有一个按钮button id为 button1，通过原生的js如何禁用？
Readonly只针对input(text/password)和textarea有效，而disabled对于所有的表单元素有效，包括select,radio,checkbox,button等。


前端的图片优化方案
使用base64编码代替图片
场景：适用于图片大小小于2KB，页面上引用图片总数不多的情况
原理：将图片转换为base64编码字符串inline到页面或css中
优势：减少http的请求次数，并可以放到后台数据库中，只传输字符串，有较多的构建工具可以直接实现
劣势：这种方法仅限于图片总数较少，而且图片大小小于2KB的情况。否则图片字符串会变得很长很长
合并图片sprite(雪碧图)
场景：任何用到页面图片的场景
原理：将多个页面上用到的背景图片合并成一个大的图片在页面中引用
优势：可以有效的较少请求个数，而且，而不影响开发体验，使用构建插件可以做到对开发者透明。适用于页面图片多且丰富的场景。
劣势：生成的图片体积较大，减少请求个数同时也增加了图片大小，不合理拆分将不利于并行加载
使用css、svg、canvas或iconfont代替图片
css代替图片
场景：适用于移动端或较高级的浏览器，而且绘制的图案较为简单。
原理：css方式可以用来绘制相对简单的团来代替图片，一般使用before或者after伪元素来丰富图案的复杂度。
优势：具有实现简单，图片体积小的特点，可以实现简单的动态效果
劣势：也受限于css的兼容性特点，绘制复杂图案困难
svg的描述和适用场景上文已说明。
canvas代替图片
场景：需要高性能的图片或动画
原理：适用html5的canvas元素绘制创建图片
优势：整个就是画2D图形时，页面渲染性能比较高，页面渲染性能受图形复杂度影响小，性能只受图形的分辨率的影响，画出来的图形可以直接保存为 .png 或者 .jpg的图形，适合于画光栅图像或者不规则图形
劣势：没有dom操作，必须依赖定时器，文字渲染性能差，不能添加描述(title属性什么的)，兼容性限制
iconfont是一种web字体来代替图片的解决方案： 场景：代替页面上色彩单一的图片 优势：兼容性好，应用广，目前使用也很广泛 劣势：但是由于字体的颜色设置单一，只能用于代替颜色单一的图片，对于色彩复杂的图片，iconfont处理起来比较困难
响应式图片
场景：不同终端对同一个图片需求不一样，可以根据终端加载不同的图片来节省没必要的流量
原理：通过picture元素，picturefill或平台判断来为不同终端平台输出不同的图片
优势：减少没必要的图片加载，灵活控制，慢速用户加载小图片不至于加载失败，移动端没必要加载大尺寸图片等，可以通过不同方式兼容所有浏览器
劣势：无法避免图片的加载过程，图片本身没优化
图片压缩
场景：在不得不加载图片的前提下，要进一步提升优化效果，只能通过有损或无损压缩来减少图片的大小。
原理：对图片进行无损、有损压缩，转为压缩后图片来实现
优势：减少图片加载流量，效果比较明显
劣势：服务器和浏览器压力增大，而且服务器需要额外的服务支持
更好的图片格式
场景：之前说到webp、bpg、sharpP等新图片格式具有更好的压缩比，可以使用这类新型的图片来代替原始图片
原理：对图片格式转换，在画质可以接受的情况下达到更好的压缩比效果
优势：减少图片加载流量，效果比较明显
劣势：服务器和浏览器压力增大，而且服务器需要额外的服务支持，格式转换要考虑浏览器的兼容性
三、图片压缩
压缩图片方式比较多，这里不一一列出，例如下面的部分工具平台：
Kraken (Web)主页： https://kraken.io/
智图主页： http://zhitu.tencent.com/支持原图png转为jpeg和webp(目前不支持bpg)，并提供各种压缩比压缩，目前在tx内部广泛使用。
目前bpg格式图片也有部分公司在试用。这方面也可以尝试下。

【算法题】数组中找到两个数，使其和等于某个数
直接用的最简单的做法——依次求数组两两元素的和，找到结果等于target的两个数，很明显，该算法的时间复杂度为O(n^2)。
　 　 显然，该解法不是该题最理想的答案，希望能给出时间复杂度更优的解，《编程之美》2.12对该题进行了讲解，给出了不同的时间复杂度的解法。
O(n*log(n))的解法：先对数组进行排序（时间复杂度为O(n*log(n))），在排序的数组中依次查找target-arr[i]是否在数组中，查找target-arr[i]时可以用二分查找（时间复杂度为O(log(n))），遍历数组一遍知道找到target-arr[i]在数组中为止，所以查找的时间复杂度为O(n*log(n))，总的时间复杂度为O(n*log(n))。
另一种O(n*log(n))的解法：《编程之美》2.12给出的解法三比较有意思，比1有一些改进，主要改进了查找的过程。首先也是要对数组进行排序（时间复杂度为O(n*log(n))），然后再已排序的数组中，令i=0，j=n-1，判断arr[i]+arr[j]是否等于target，等于则结束，如果小于target，则i=i+1；如果大于target，则j=j-1，这样查找符合条件的两个元素的过程只需要遍历数组一次，因此查找的时间复杂度降低到O(n)，总的时间复杂度还是O(n*log(n))。
O(n)的解法：将数组中的所有元素存入hash表中，遍历一遍时间复杂度O(n)，然后再遍历一遍数组，查找target-arr[i]是否出现在hash表中，因为在hash表中查找的过程只需O(1)时间，所以第二次遍历的时间复杂度也是O(n)，总的时间复杂度为O(n)。但是该方法也是有弊端的（也是hash表固有的弊端），就是较高的空间复杂度——需要O(n)的hash表存储空间，例如{1，3，6,100000}这样一个数组就需要用100000的空间来存储，存储效率太低太低！另外说明一下，因为这里只需要标记数是否出现过，所以这里用Bitmap数据结构（见：）可以适当的节省空间。hash表是一种用空间换时间的方法，所以该题需要根据实际情况选取合适的方法。
　 　 另外，http://www.dewen.org/q/6111中一位朋友给出了这样的答案，代码如下：
[cpp] view plain copy print?
#include <iostream>  
#include <map>  
using namespace std;  

int main()  
{  
int a[] = {1,9,5,6,3,4,23,456,32,2,41,23,34}; //数组  
map<int,int> m;  
int sum = 10; //给定的整数  
int count = sizeof(a)/sizeof(int);  
for(int i=0; i < count; i++) {  
m.insert(map<int,int>::value_type(sum-a[i], a[i])); //放到hash map中  
}  
for(int i=0; i < count; i++) {  
if(m.find(a[i])->second == sum-a[i]) cout << "find " << i <<endl; //hash值查找  
}  
return 0;  
}  

C++大概的实现就是这样了。  


//为元素添加class
var inp=document.getElementById('link');
inp.className='newAdd';
inp.setAttribute('class','addAgain'); 